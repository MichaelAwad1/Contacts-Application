/// <reference types="jquery" />
import { TagBarEventMap, TagBarModel, TagBarOverflowPopup, Widget } from '../index';
export declare class TagBar extends Widget implements TagBarModel {
    model: TagBarModel;
    eventMap: TagBarEventMap;
    self: TagBar;
    overflowEnabled: boolean;
    overflowVisible: boolean;
    tags: string[];
    clickable: boolean;
    overflow: TagBarOverflowPopup;
    $overflowIcon: JQuery;
    constructor();
    protected _render(): void;
    protected _renderProperties(): void;
    protected _remove(): void;
    setTags(tags: string[]): void;
    updateTags(): void;
    protected _renderTags(): void;
    setClickable(clickable: boolean): void;
    protected _renderClickable(): void;
    protected _onTagClick(event: JQuery.MouseDownEvent): boolean;
    protected _triggerTagClick(tag: string): void;
    protected _renderEnabled(): void;
    protected _onTagRemoveClick(event: JQuery.ClickEvent): boolean;
    removeTagByElement($tag: JQuery): void;
    protected _triggerTagRemove(tag: string, $tag: JQuery): void;
    protected _onOverflowIconMousedown(event: JQuery.MouseDownEvent): boolean;
    isOverflowIconFocused(): boolean;
    openOverflowPopup(): void;
    protected _createOverflowPopup(): TagBarOverflowPopup;
    closeOverflowPopup(): void;
    toggleOverflowPopup(): void;
    protected _installTooltipSupport(): void;
    protected _uninstallTooltipSupport(): void;
    protected _tagTooltipText($tag: JQuery): string;
    protected _removeFocusFromTagElements(): void;
    focus(options?: {
        preventScroll?: boolean;
    }): boolean;
    blur(): void;
    setOverflowVisible(overflowVisible: boolean): void;
    protected _renderOverflowVisible(): void;
    /**
     * Returns the tag-texts of the tag-elements currently visible in the UI (=not hidden).
     */
    visibleTags(): string[];
    renderTags($parent: JQuery, tags: string[]): void;
    renderTag($parent: JQuery, tagText: string): JQuery;
    protected _renderTagsClickable($tags: JQuery): void;
    protected _renderTagsRemovable($tags: JQuery): void;
    static findFocusedTagElement($container: JQuery): JQuery;
    static findFocusableTagElements($container: JQuery): JQuery;
    static focusFirstTagElement($container: JQuery): void;
    static firstTagElement($container: JQuery): JQuery;
    static focusTagElement($tagElement: JQuery): void;
    static unfocusTagElement($tagElement: JQuery): void;
    static getTagData($tag: JQuery): string;
}
//# sourceMappingURL=TagBar.d.ts.map