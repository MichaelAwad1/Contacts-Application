import { CollapseHandle, CompositeField, FormField, HtmlComponent, InitModelOf, SplitBoxCollapseKeyStroke, SplitBoxEventMap, SplitBoxFirstCollapseKeyStroke, SplitBoxModel, SplitBoxSecondCollapseKeyStroke } from '../../../index';
export declare class SplitBox extends CompositeField {
    model: SplitBoxModel;
    eventMap: SplitBoxEventMap;
    self: SplitBox;
    firstField: FormField;
    secondField: FormField;
    collapsibleField: FormField;
    fieldCollapsed: boolean;
    toggleCollapseKeyStroke: SplitBoxCollapseKeyStroke;
    firstCollapseKeyStroke: SplitBoxFirstCollapseKeyStroke;
    secondCollapseKeyStroke: SplitBoxSecondCollapseKeyStroke;
    splitHorizontal: boolean;
    splitterEnabled: boolean;
    splitterPosition: number;
    minSplitterPosition: number;
    splitterPositionType: string;
    fieldMinimized: boolean;
    minimizeEnabled: boolean;
    htmlSplitArea: HtmlComponent;
    collapseHandle: CollapseHandle;
    protected _oldSplitterPositionType: string;
    protected _$splitArea: JQuery;
    protected _$splitter: JQuery;
    protected _$window: JQuery<Window>;
    protected _$body: JQuery<Body>;
    constructor();
    static SPLITTER_POSITION_TYPE_RELATIVE_FIRST: string;
    static SPLITTER_POSITION_TYPE_RELATIVE_SECOND: string;
    static SPLITTER_POSITION_TYPE_ABSOLUTE_FIRST: string;
    static SPLITTER_POSITION_TYPE_ABSOLUTE_SECOND: string;
    protected _init(model: InitModelOf<this>): void;
    /**
     * Set the group boxes of the split box to responsive if not set otherwise.
     */
    protected _initResponsive(): void;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _remove(): void;
    protected _setSplitterPosition(splitterPosition: number): void;
    protected _renderSplitterPosition(): void;
    protected _setSplitterPositionType(splitterPositionType: string): void;
    protected _renderSplitterPositionType(): void;
    protected _isSplitterPositionTypeRelative(positionType: string): boolean;
    protected _renderSplitterEnabled(): void;
    setFieldCollapsed(collapsed: boolean): void;
    protected _renderFieldCollapsed(): void;
    setCollapsibleField(field: FormField): void;
    protected _updateCollapseHandle(): void;
    protected _updateCollapseHandleButtons(): void;
    getEffectiveSplitterPosition(): number;
    setMinSplitterPosition(minSplitterPosition: number): void;
    protected _renderMinSplitterPosition(): void;
    setFieldMinimized(minimized: boolean): void;
    protected _renderFieldMinimized(): void;
    setMinimizeEnabled(enabled: boolean): void;
    protected _renderMinimizeEnabled(): void;
    protected _isMinimizable(): boolean;
    protected _renderCollapsibleField(): void;
    protected _setToggleCollapseKeyStroke(keyStroke: string): void;
    protected _setFirstCollapseKeyStroke(keyStroke: string): void;
    protected _setSecondCollapseKeyStroke(keyStroke: string): void;
    protected _renderCollapseHandle(): void;
    newSplitterPosition(newSplitterPosition: number, updateFieldMinimizedState: boolean): void;
    protected _updateFieldMinimized(): void;
    protected _isSplitterPositionInMinimalRange(newSplitterPosition: number): boolean;
    toggleFieldCollapsed(): void;
    collapseHandleButtonPressed(event: {
        left?: boolean;
        right?: boolean;
    }): void;
    getFields(): FormField[];
    protected _updateFieldVisibilityClasses(): void;
}
//# sourceMappingURL=SplitBox.d.ts.map