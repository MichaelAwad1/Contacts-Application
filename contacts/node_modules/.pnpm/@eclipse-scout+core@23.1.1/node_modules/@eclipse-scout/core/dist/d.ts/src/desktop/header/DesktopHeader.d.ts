import { Desktop, DesktopHeaderEventMap, DesktopHeaderModel, DesktopLogo, DesktopTabArea, DesktopToolBox, Event, EventHandler, InitModelOf, Menu, MenuBar, ObjectOrChildModel, OutlineContent, PropertyChangeEvent, ViewButtonBox, Widget } from '../../index';
export declare class DesktopHeader extends Widget implements DesktopHeaderModel {
    model: DesktopHeaderModel;
    eventMap: DesktopHeaderEventMap;
    self: DesktopHeader;
    desktop: Desktop;
    tabArea: DesktopTabArea;
    logoUrl: string;
    logo: DesktopLogo;
    toolBoxVisible: boolean;
    toolBox: DesktopToolBox;
    viewButtonBoxVisible: boolean;
    viewButtonBox: ViewButtonBox;
    outlineContent: OutlineContent;
    protected _desktopPropertyChangeHandler: EventHandler<PropertyChangeEvent<any, Desktop>>;
    protected _desktopAnimationEndHandler: EventHandler<Event<Desktop>>;
    protected _outlineContentMenuBarVisibleChangeHandler: EventHandler<PropertyChangeEvent<boolean, MenuBar>>;
    protected _outlineContentCssClassChangeHandler: EventHandler<PropertyChangeEvent<string, OutlineContent>>;
    protected _viewButtonBoxPropertyChangeHandler: EventHandler<PropertyChangeEvent<any, ViewButtonBox>>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _createTabArea(): DesktopTabArea;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _remove(): void;
    protected _renderViewTabs(): void;
    protected _renderToolBox(): void;
    protected _createToolBox(): DesktopToolBox;
    protected _removeToolBox(): void;
    protected _renderToolBoxVisible(): void;
    protected _renderLogoUrl(): void;
    protected _renderLogo(): void;
    protected _createLogo(): DesktopLogo;
    protected _removeLogo(): void;
    protected _renderViewButtonBox(): void;
    protected _createViewButtonBox(): ViewButtonBox;
    protected _removeViewButtonBox(): void;
    protected _renderViewButtonBoxVisible(): void;
    sendToBack(): void;
    bringToFront(): void;
    protected _renderInBackground(): void;
    setLogoUrl(logoUrl: string): void;
    setToolBoxVisible(visible: boolean): void;
    setViewButtonBoxVisible(visible: boolean): void;
    setMenus(menus: ObjectOrChildModel<Menu>[]): void;
    protected _setOutlineContent(outlineContent: OutlineContent): void;
    updateViewButtonBoxVisibility(): void;
    protected _attachOutlineContentHandlers(): void;
    protected _attachOutlineContentMenuBarHandler(): void;
    protected _attachOutlineContentCssClassHandler(): void;
    protected _detachOutlineContentHandlers(): void;
    protected _detachOutlineContentMenuBarHandler(): void;
    protected _detachOutlineContentCssClassHandler(): void;
    protected _outlineContentMenuBar(outlineContent: OutlineContent): MenuBar;
    updateViewButtonStyling(): void;
    protected _getOutlineContentForViewButtonStyling(): OutlineContent;
    protected _updateOutlineContentHasMenuBar(): void;
    protected _updateOutlineContentHasDimmedBackground(): void;
    protected _onDesktopNavigationVisibleChange(): void;
    protected _onDesktopAnimationEnd(event: Event<Desktop>): void;
    onBenchOutlineContentChange(content: OutlineContent, oldContent: OutlineContent): void;
    protected _onDesktopPropertyChange(event: PropertyChangeEvent<any, Desktop>): void;
    protected _onOutlineContentMenuBarVisibleChange(event: PropertyChangeEvent<boolean, MenuBar>): void;
    protected _onOutlineContentCssClassChange(event: PropertyChangeEvent<string, OutlineContent>): void;
    protected _onViewButtonBoxPropertyChange(event: PropertyChangeEvent<any, ViewButtonBox>): void;
}
//# sourceMappingURL=DesktopHeader.d.ts.map