import { BenchColumnLayoutData, Desktop, DesktopDisplayStyle, DesktopHistoryState, Event, Form, KeyStroke, Menu, NativeNotificationDefaults, Popup, PropertyChangeEvent, ViewButton, Widget, WidgetEventMap } from '../index';
export interface DesktopCancelFormsEvent<T = Desktop> extends Event<T> {
    forms: Form[];
}
export interface DesktopFormActivateEvent<T = Desktop> extends Event<T> {
    form: Form;
}
export interface DesktopPopupOpenEvent<T = Desktop> extends Event<T> {
    popup: Popup;
}
export interface DesktopEventMap extends WidgetEventMap {
    'animationEnd': Event;
    'cancelForms': DesktopCancelFormsEvent;
    'dataChange': Event;
    'formActivate': DesktopFormActivateEvent;
    'historyEntryActivate': Event & DesktopHistoryState;
    'logoAction': Event;
    'outlineChange': Event;
    'popupOpen': DesktopPopupOpenEvent;
    'propertyChange:benchLayoutData': PropertyChangeEvent<BenchColumnLayoutData>;
    'propertyChange:benchVisible': PropertyChangeEvent<boolean>;
    'propertyChange:dense': PropertyChangeEvent<boolean>;
    'propertyChange:displayStyle': PropertyChangeEvent<DesktopDisplayStyle>;
    'propertyChange:focusedElement': PropertyChangeEvent<Widget>;
    'propertyChange:headerVisible': PropertyChangeEvent<boolean>;
    'propertyChange:inBackground': PropertyChangeEvent<boolean>;
    'propertyChange:keyStrokes': PropertyChangeEvent<KeyStroke[]>;
    'propertyChange:menus': PropertyChangeEvent<Menu[]>;
    'propertyChange:nativeNotificationDefaults': PropertyChangeEvent<NativeNotificationDefaults>;
    'propertyChange:navigationHandleVisible': PropertyChangeEvent<boolean>;
    'propertyChange:navigationVisible': PropertyChangeEvent<boolean>;
    'propertyChange:splitterVisible': PropertyChangeEvent<boolean>;
    'propertyChange:theme': PropertyChangeEvent<string>;
    'propertyChange:viewButtons': PropertyChangeEvent<ViewButton[]>;
    'propertyChange:views': PropertyChangeEvent<Form[]>;
}
//# sourceMappingURL=DesktopEventMap.d.ts.map