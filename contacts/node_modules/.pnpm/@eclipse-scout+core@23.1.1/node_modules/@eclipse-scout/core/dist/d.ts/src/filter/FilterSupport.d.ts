/// <reference types="jquery" />
import { EventHandler, Filter, Filterable, FilterElement, FilterResult, FilterSupportOptions, KeyStroke, Predicate, PropertyChangeEvent, SetFiltersResult, StringField, TextFilter, Widget, WidgetSupport } from '../index';
export type FilterOrFunction<TElem extends FilterElement> = Filter<TElem> | Predicate<TElem>;
export declare class FilterSupport<TElem extends FilterElement> extends WidgetSupport {
    widget: Widget & Filterable<TElem>;
    protected _cancelFilterFieldKeyStroke: KeyStroke;
    protected _createTextFilter: () => TextFilter<TElem>;
    protected _exitFilterFieldKeyStroke: KeyStroke;
    protected _filterElements: () => FilterResult<TElem>;
    protected _filterField: StringField;
    protected _filterFieldDisplayTextChangedHandler: EventHandler<PropertyChangeEvent<string>>;
    protected _focusFilterFieldKeyStroke: KeyStroke;
    protected _focusInHandler: (event: JQuery.FocusInEvent) => void;
    protected _focusOutHandler: (event: JQuery.FocusOutEvent) => void;
    protected _getElementText: (elem: TElem) => string;
    protected _getElementsForFiltering: () => TElem[];
    protected _textFilter: TextFilter<TElem>;
    protected _updateTextFilterText: (filter: TextFilter<TElem>, text: string) => boolean;
    /**
     * @param options a mandatory options object
     */
    constructor(options: FilterSupportOptions<TElem>);
    protected _createDefaultTextFilter(): TextFilter<TElem>;
    protected _updateDefaultTextFilterText(filter: TextFilter<TElem>, text: string): boolean;
    renderFilterField(): void;
    protected _renderFilterField(): void;
    protected _updateFilterFieldBackgroundColor(): void;
    protected _onFilterFieldDisplayTextChanged(event: PropertyChangeEvent<string>): void;
    protected _onFocusIn(event: JQuery.FocusInEvent): void;
    protected _onFocusOut(event: JQuery.FocusOutEvent): void;
    protected _updateFocusInsideWidget(target: Element): boolean;
    protected _exitFilterField(): void;
    protected _cancelFilterField(): void;
    protected _resetFilterField(): void;
    protected _removeFilterField(): void;
    remove(): void;
    /**
     * @param filter The filters to add.
     * @param applyFilter Whether to apply the filters after modifying the filter list or not. Default is true.
     * @returns the added filters.
     */
    addFilter(filter: FilterOrFunction<TElem> | FilterOrFunction<TElem>[], applyFilter?: boolean): Filter<TElem>[];
    /**
     * @param filter The filters to remove.
     * @param applyFilter Whether to apply the filters after modifying the filter list or not. Default is true.
     * @returns the removed filters.
     */
    removeFilter(filter: FilterOrFunction<TElem> | FilterOrFunction<TElem>[], applyFilter?: boolean): Filter<TElem>[];
    /**
     * @param filter The new filters.
     * @param applyFilter Whether to apply the filters after modifying the filter list or not. Default is true.
     */
    setFilters(filters: FilterOrFunction<TElem> | FilterOrFunction<TElem>[], applyFilter?: boolean): SetFiltersResult<TElem>;
    protected _setFilters(filters: FilterOrFunction<TElem>[], applyFilter?: boolean): void;
    protected _addSyntheticFilters(filters: FilterOrFunction<TElem>[]): void;
    protected _addSyntheticFilter(filters: FilterOrFunction<TElem>[], syntheticFilter: Filter<TElem>): void;
    protected _getFilters(): Filter<TElem>[];
    protected _findFilter(filters: FilterOrFunction<TElem>[], filter: FilterOrFunction<TElem>): Filter<TElem>;
    protected _getFilterCreatedByFunction(filters: FilterOrFunction<TElem>[], filterFunc: Predicate<TElem>): Filter<TElem>;
    protected _hasFilter(filters: FilterOrFunction<TElem>[], filter: FilterOrFunction<TElem>): boolean;
    protected _createFilterByFunction(filterFunc: Predicate<TElem>): Filter<TElem>;
    filter(): FilterResult<TElem>;
    protected _filter(): FilterResult<TElem>;
    applyFilters(elements: TElem[], fullReset?: boolean): FilterResult<TElem>;
    applyFiltersForElement(element: TElem): boolean;
    elementAcceptedByFilters(element: TElem): boolean;
}
//# sourceMappingURL=FilterSupport.d.ts.map