/// <reference types="jquery" />
import { InitModelOf, MaxLengthHandlerModel, MaxLengthHandlerTarget, ObjectWithType, SomeRequired } from '../index';
export declare class MaxLengthHandler implements MaxLengthHandlerModel, ObjectWithType {
    model: MaxLengthHandlerModel;
    initModel: SomeRequired<this['model'], 'target'>;
    objectType: string;
    onInputFieldPaste: (event: JQuery.TriggeredEvent<HTMLInputElement, undefined, HTMLInputElement, HTMLInputElement>) => void;
    target: MaxLengthHandlerTarget;
    $textInputField: JQuery<HTMLInputElement>;
    constructor(options: InitModelOf<MaxLengthHandler>);
    install($textInputField: JQuery<HTMLInputElement>): void;
    uninstall(): void;
    render(): void;
    protected _onInputFieldPaste(event: JQuery.TriggeredEvent<HTMLInputElement, undefined, HTMLInputElement, HTMLInputElement>): void;
    protected _getSelectionSize(): number;
    /**
     * Get clipboard data, different strategies for browsers.
     * Must use a callback because this is required by Chrome's clipboard API.
     */
    protected _getClipboardData(event: JQuery.TriggeredEvent<HTMLInputElement, undefined, HTMLInputElement, HTMLInputElement>, doneHandler: (pastedText: string) => void): void;
    protected _showNotification(textKey: string): void;
}
//# sourceMappingURL=MaxLengthHandler.d.ts.map