import { EventHandler, InitModelOf, MenuBar, PropertyChangeEvent, Tab, TabArea, TabBox, TabItem, Widget, WidgetEventMap, WidgetModel } from '../../../index';
export interface TabBoxHeaderModel extends WidgetModel {
    tabBox: TabBox;
}
export interface TabBoxHeaderEventMap extends WidgetEventMap {
    'propertyChange:selectedTabItem': PropertyChangeEvent<TabItem>;
}
export declare class TabBoxHeader extends Widget implements TabBoxHeaderModel {
    model: TabBoxHeaderModel;
    eventMap: TabBoxHeaderEventMap;
    self: TabBoxHeader;
    tabBox: TabBox;
    tabArea: TabArea;
    menuBar: MenuBar;
    $borderBottom: JQuery;
    protected _tabBoxPropertyChangeHandler: EventHandler<PropertyChangeEvent>;
    protected _tabAreaPropertyChangeHandler: EventHandler<PropertyChangeEvent>;
    constructor();
    protected _init(options: InitModelOf<this>): void;
    protected _render(): void;
    protected _destroy(): void;
    setTabItems(tabItems: TabItem[]): void;
    protected _setSelectedTab(tab: Tab): void;
    setSelectedTabItem(tabItem: TabItem): void;
    protected _setSelectedTabItem(tabItem: TabItem): void;
    isTabItemFocused(tabItem: TabItem): boolean;
    focusTabItem(tabItem: TabItem): boolean;
    getTabForItem(tabItem: TabItem): Tab;
    protected _onTabBoxPropertyChange(event: PropertyChangeEvent): void;
    protected _onTabAreaPropertyChange(event: PropertyChangeEvent): void;
}
//# sourceMappingURL=TabBoxHeader.d.ts.map