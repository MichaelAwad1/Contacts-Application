import { EventEmitter, PropertyChangeEvent, PropertyEventMap } from '../index';
export declare class PropertyEventEmitter extends EventEmitter {
    eventMap: PropertyEventMap;
    self: PropertyEventEmitter;
    constructor();
    /**
     * Sets a new value for a specific property. If the new value is the same value as the old one, nothing happens.
     * Otherwise, {@link _setProperty} is used to set the property and trigger a property change event.
     * <p>
     * This default behavior can be overridden by implementing a custom \_setXy function where XY is the property name.
     * If such a function exists, it will be called instead of {@link _setProperty}
     * @param propertyName the name of the property
     * @param newValue the new value the property should get
     * @returns true if the property has been changed, false if not.
     */
    setProperty(propertyName: string, value: any): boolean;
    protected _callSetProperty(propertyName: string, value: any): void;
    /**
     * Sets the value of the property 'propertyName' to 'newValue' and then triggers a propertyChange event for that property.
     * <p>
     * It is possible to prevent the setting of the property value by using {@link Event.preventDefault}.
     *
     * @internal
     * @param propertyName the name of the property
     * @param newValue the new value the property should get
     * @returns true if the property has been changed, false if not.
     */
    _setProperty(propertyName: string, newValue: any): boolean;
    /**
     * Triggers a property change for a single property.
     */
    triggerPropertyChange<T>(propertyName: string, oldValue: T, newValue: T): PropertyChangeEvent<T, this>;
    /**
     * Calls the setter of the given property name if it exists. A setter has to be named setXy, where Xy is the property name.
     * If there is no setter for the property name, {@link setProperty} is called.
     */
    callSetter(propertyName: string, value: any): void;
}
//# sourceMappingURL=PropertyEventEmitter.d.ts.map