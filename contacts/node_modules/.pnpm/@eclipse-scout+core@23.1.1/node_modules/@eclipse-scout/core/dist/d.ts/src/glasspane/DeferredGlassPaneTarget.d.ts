import { GlassPaneRenderer, GlassPaneTarget, Widget } from '../index';
/**
 * Is used to render glasspane after the glasspane targets are set. This case occurs when a child is rendered before a parent is rendered-> on reload page.
 */
export declare class DeferredGlassPaneTarget {
    glassPaneRenderer: GlassPaneRenderer;
    $glassPaneTargets: GlassPaneTarget[];
    constructor();
    ready($glassPaneTargets: GlassPaneTarget[]): void;
    rendererReady(glassPaneRenderer: GlassPaneRenderer): void;
    removeGlassPaneRenderer(glassPaneRenderer: GlassPaneRenderer): void;
    renderWhenReady(): void;
    /**
     * @param widget a not rendered Widget
     * @param findGlassPaneTargets function which returns the targets
     */
    static createFor(widget: Widget, findGlassPaneTargets: () => GlassPaneTarget[]): DeferredGlassPaneTarget[];
}
//# sourceMappingURL=DeferredGlassPaneTarget.d.ts.map