/// <reference types="jquery" />
import { Cell, CheckBoxField, Column, TableRow } from '../../index';
/**
 * May be an ordinary boolean column or the table's checkable column (table.checkableColumn)
 * Difference: the table's checkable column represents the row.checked state, other boolean columns represent their own value.
 */
export declare class BooleanColumn extends Column<boolean> {
    triStateEnabled: boolean;
    constructor();
    protected _formatValue(value: boolean, row?: TableRow): string;
    buildCell(cell: Cell<boolean>, row: TableRow): string;
    $checkBox($row: JQuery): JQuery;
    protected _cellCssClass(cell: Cell<boolean>, tableNode?: boolean): string;
    /**
     * This function does intentionally _not_ call the super function (prepareCellEdit) because we don't want to
     * show an editor for BooleanColumns when user clicks on a cell.
     */
    onMouseUp(event: JQuery.MouseUpEvent, $row: JQuery): void;
    /**
     * In a remote app this function is overridden, the default implementation is the local case.
     * @see TableAdapter
     */
    protected _toggleCellValue(row: TableRow, cell: Cell<boolean>): void;
    protected _createEditor(row: TableRow): CheckBoxField;
    /**
     * @override
     */
    cellTextForGrouping(row: TableRow): string;
    setTriStateEnabled(triStateEnabled: boolean): void;
}
//# sourceMappingURL=BooleanColumn.d.ts.map