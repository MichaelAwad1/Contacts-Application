import { Code, CodeType, ObjectOrModel } from '../index';
export declare const codes: {
    /**
     * This default language is used whenever a code registers its texts in scout.texts.
     */
    defaultLanguage: string;
    registry: Record<string, CodeType<any>>;
    bootstrap(url: string): JQuery.Promise<any>;
    /** @internal */
    _preInit(url: string, data: any): void;
    init(data?: any): void;
    add(codeTypes: ObjectOrModel<CodeType<any>> | ObjectOrModel<CodeType<any>>[]): void;
    /**
     * @param codeTypes code types or code type ids to remove
     */
    remove(codeTypes: string | CodeType<any> | (string | CodeType<any>)[]): void;
    /**
     * Returns a code for the given codeId. When you work with hard-coded codes
     * you should always use this function and not <code>optGet</code>.
     *
     * The codeId is a string in the following format:
     *
     * "[CodeType.id] [Code.id]"
     *
     * Examples:
     * "71074 104860"
     * "MessageChannel Phone"
     *
     * CodeType.id and {@link Code.id} are separated by a space.
     * The {@link Code.id} alone is not unique, that's why the {@link CodeType.id} must be always provided.
     *
     * You can also call this function with two arguments. In that case the first argument
     * is the codeTypeId and the second is the codeId.
     *
     * @param vararg either only "[CodeType.id]" or "[CodeType.id] [Code.id]"
     * @param codeId
     * @returns a code for the given codeId
     * @throw Error if code does not exist
     */
    get<T>(vararg: string, codeId?: T): Code<T>;
    /**
     * Same as <code>get</code>, but does not throw an error if the code does not exist.
     * You should always use this function when you work with codes coming from a dynamic data source.
     *
     * @param vararg
     * @param codeId
     * @returns code for the given codeId or undefined if code does not exist
     */
    optGet<T_1>(vararg: string, codeId?: T_1): Code<T_1>;
    /** @internal */
    _get(funcName: string, funcArgs: any[]): Code<any>;
    codeType(codeTypeId: string, optional?: boolean): CodeType<any>;
    generateTextKey(code: Code<any>): string;
    /**
     * Registers texts for a code. It uses the method generateTextKey to generate the text key.
     * The texts for the default locale specified by defaultLanguage are used as default texts.
     *
     * @param code the code to register the text for
     * @param textsArg an object with the languageTag as key and the translated text as value
     * @returns the generated text key
     */
    registerTexts(code: Code<any>, textsArg: Record<string, string>): string;
};
//# sourceMappingURL=codes.d.ts.map