/// <reference types="jquery" />
import { FormField, InitModelOf, WizardProgressFieldEventMap, WizardProgressFieldModel } from '../../../index';
export declare class WizardProgressField extends FormField implements WizardProgressFieldModel {
    model: WizardProgressFieldModel;
    eventMap: WizardProgressFieldEventMap;
    self: WizardProgressField;
    activeStepIndex: number;
    steps: WizardStep[];
    /** Used to determine direction of transition ("going backward" or "going forward") */
    previousActiveStepIndex: number;
    /**
     * Helper map to find a step by step index. The step index does not necessarily correspond to the
     * array index, because invisible model steps can produce "holes" in the sequence of indices.
     */
    stepsMap: Record<number, WizardStep>;
    keepActiveStepAtLeftBorder: boolean;
    animateScrolling: boolean;
    $wizardStepsBody: JQuery;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _setSteps(steps: WizardStep[]): void;
    protected _renderSteps(): void;
    protected _setActiveStepIndex(activeStepIndex: number): void;
    protected _renderActiveStepIndex(): void;
    protected _updateStepClasses(step: WizardStep): void;
    protected _stepIndex($step: JQuery): number;
    protected _updateStepsMap(): void;
    protected _resolveStep(stepIndex: number): WizardStep;
    protected _onStepClick(event: JQuery.ClickEvent): void;
    scrollToActiveStep(): void;
}
export interface WizardStep {
    index?: number;
    title?: string;
    subTitle?: string;
    tooltipText?: string;
    iconId?: string;
    enabled?: boolean;
    actionEnabled?: boolean;
    cssClass?: string;
    finished?: boolean;
    modelClass?: string;
    classId?: string;
    $step?: JQuery;
}
//# sourceMappingURL=WizardProgressField.d.ts.map