import { AggregateTableRow, Cell, EnumObject, InitModelOf, LookupRow, ObjectWithType, Page, SomeRequired, Table, TableRowModel } from '../index';
export type TableRowStatus = EnumObject<typeof TableRow.Status>;
export declare class TableRow implements TableRowModel, ObjectWithType {
    model: TableRowModel;
    initModel: SomeRequired<this['model'], 'parent'>;
    objectType: string;
    cells: Cell[];
    checked: boolean;
    compactValue: string;
    enabled: boolean;
    filterAccepted: boolean;
    height: number;
    hasError: boolean;
    id: string;
    initialized: boolean;
    iconId: string;
    parentRow: TableRow;
    parent: Table;
    childRows: TableRow[];
    expanded: boolean;
    status: TableRowStatus;
    nodeId: string;
    hierarchyLevel: number;
    cssClass: string;
    aggregateRowAfter: AggregateTableRow;
    aggregateRowBefore: AggregateTableRow;
    lookupRow: LookupRow<any>;
    $row: JQuery;
    page: Page;
    expandable: boolean;
    constructor();
    static Status: {
        readonly NON_CHANGED: "nonChanged";
        readonly INSERTED: "inserted";
        readonly UPDATED: "updated";
    };
    init(model: InitModelOf<this>): void;
    protected _init(model: InitModelOf<this>): void;
    protected _initCells(): void;
    animateExpansion(): void;
    hasFilterAcceptedChildren(): boolean;
    getTable(): Table;
    setCompactValue(compactValue: string): void;
    setFilterAccepted(filterAccepted: boolean): void;
}
//# sourceMappingURL=TableRow.d.ts.map