import { ButtonTile, EventHandler, InitModelOf, KeyStrokeContext, Outline, OutlinePageChangedEvent, Page, PageTileGridEventMap, PageTileGridModel, TileGrid, TileGridLayoutConfig, TreeAllChildNodesDeletedEvent, TreeChildNodeOrderChangedEvent, TreeNodeChangedEvent, TreeNodesDeletedEvent, TreeNodesInsertedEvent } from '../../../index';
export declare class PageTileGrid extends TileGrid implements PageTileGridModel {
    model: PageTileGridModel;
    eventMap: PageTileGridEventMap;
    self: PageTileGrid;
    tiles: ButtonTile[];
    compact: boolean;
    compactLayoutConfig: TileGridLayoutConfig;
    outline: Outline;
    page: Page;
    nodes: Page[];
    protected _outlineNodeChangedHandler: EventHandler<TreeNodeChangedEvent<Outline> | OutlinePageChangedEvent>;
    protected _outlineStructureChangedHandler: EventHandler<TreeNodesDeletedEvent | TreeNodesInsertedEvent | TreeAllChildNodesDeletedEvent | TreeChildNodeOrderChangedEvent>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _destroy(): void;
    protected _createKeyStrokeContext(): KeyStrokeContext;
    protected _initKeyStrokeContext(): void;
    setOutline(outline: Outline): void;
    setCompact(compact: boolean): void;
    protected _setCompact(compact: boolean): void;
    protected _setCompactLayoutConfig(layoutConfig: TileGridLayoutConfig): void;
    setPage(page: Page): void;
    setNodes(nodes: Page[]): void;
    protected _createPageTiles(pages: Page[]): ButtonTile[];
    protected _createPageTile(page: Page): ButtonTile;
    protected _rebuild(): void;
    protected _onOutlineNodeChanged(event: TreeNodeChangedEvent<Outline> | OutlinePageChangedEvent): void;
    protected _onOutlineStructureChanged(event: TreeNodesDeletedEvent | TreeNodesInsertedEvent | TreeAllChildNodesDeletedEvent | TreeChildNodeOrderChangedEvent): void;
}
//# sourceMappingURL=PageTileGrid.d.ts.map