import { Dimension, Form, FormLayout, Insets, Point, Rectangle } from '../index';
export declare class DialogLayout extends FormLayout {
    form: Form;
    autoSize: boolean;
    shrinkEnabled: boolean;
    constructor(form: Form);
    layout($container: JQuery): void;
    /**
     * @param currentBounds
     *          bounds as returned by the graphics.bounds() function, i.e. position is the CSS
     *          position (top-left of "margin box"), dimension excludes margins
     * @param prefBounds
     *          optional preferred bounds (same expectations as with "currentBounds")
     * @returns
     *          adjusted size excluding margins (suitable to pass to graphics.setSize())
     */
    protected _calcSize($container: JQuery, currentBounds: Rectangle, prefBounds?: Rectangle): Dimension;
    /**
     * Calculates the new container size and position. If the given containerSize is larger then the windowSize, the size will be adjusted.
     *
     * @param windowSize total size of the window
     * @param containerPosition current CSS position of the container (top-left of the "margin box")
     * @param containerSize preferred size of container (excluding margins)
     * @param containerMargins margins of the container
     * @returns the new, adjusted container size (excluding margins)
     */
    static fitContainerInWindow(windowSize: Dimension, containerPosition: Point, containerSize: Dimension, containerMargins: Insets): Dimension;
    /**
     * Returns the coordinates to place the given container in the optical middle of the window.
     *
     * @param $container
     * @returns new X,Y position of the container
     */
    static positionContainerInWindow($container: JQuery): Point;
}
//# sourceMappingURL=DialogLayout.d.ts.map