/// <reference types="jquery" />
import { AddCellEditorFieldCssClassesOptions, CheckBoxFieldEventMap, CheckBoxFieldModel, CheckBoxToggleKeyStroke, InitModelOf, KeyStrokeContext, ValueField } from '../../../index';
export declare class CheckBoxField extends ValueField<boolean> implements CheckBoxFieldModel {
    model: CheckBoxFieldModel;
    eventMap: CheckBoxFieldEventMap;
    self: CheckBoxField;
    triStateEnabled: boolean;
    wrapText: boolean;
    keyStroke: string;
    checkBoxKeyStroke: CheckBoxToggleKeyStroke;
    formKeyStrokeContext: KeyStrokeContext;
    $checkBox: JQuery;
    $checkBoxLabel: JQuery;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _initKeyStrokeContext(): void;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _remove(): void;
    protected _renderDisplayText(): void;
    setValue(value: boolean): void;
    /**
     * The value may be false, true (and null in tri-state mode)
     */
    protected _renderValue(): void;
    protected _renderEnabled(): void;
    setTriStateEnabled(triStateEnabled: boolean): void;
    protected _renderLabel(): void;
    protected _renderFont(): void;
    protected _renderForegroundColor(): void;
    protected _renderBackgroundColor(): void;
    protected _renderGridData(): void;
    protected _renderGridDataHints(): void;
    setKeyStroke(keyStroke: string): void;
    protected _setKeyStroke(keyStroke: string): void;
    setWrapText(wrapText: boolean): void;
    protected _renderWrapText(): void;
    acceptInput(whileTyping?: boolean): void;
    toggleChecked(): void;
    prepareForCellEdit(opts?: AddCellEditorFieldCssClassesOptions): void;
    protected _onMouseDown(event: JQuery.MouseDownEvent): void;
}
//# sourceMappingURL=CheckBoxField.d.ts.map