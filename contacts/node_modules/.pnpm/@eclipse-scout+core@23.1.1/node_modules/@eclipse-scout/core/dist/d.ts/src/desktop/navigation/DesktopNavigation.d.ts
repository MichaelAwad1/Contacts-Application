/// <reference types="jquery" />
import { CollapseHandleActionEvent, Desktop, DesktopNavigationEventMap, DesktopNavigationHandle, DesktopNavigationModel, DesktopToolBox, EventHandler, HtmlComponent, InitModelOf, LayoutData, Outline, PropertyChangeEvent, ViewButtonBox, Widget } from '../../index';
export declare class DesktopNavigation extends Widget implements DesktopNavigationModel {
    model: DesktopNavigationModel;
    eventMap: DesktopNavigationEventMap;
    self: DesktopNavigation;
    parent: Desktop;
    htmlComp: HtmlComponent & {
        layoutData: DesktopNavigationLayoutData;
    };
    desktop: Desktop;
    outline: Outline;
    handleVisible: boolean;
    handle: DesktopNavigationHandle;
    toolBox: DesktopToolBox;
    toolBoxVisible: boolean;
    viewButtonBox: ViewButtonBox;
    layoutData: DesktopNavigationLayoutData;
    $body: JQuery;
    htmlCompBody: HtmlComponent;
    protected _outlinePropertyChangeHandler: EventHandler<PropertyChangeEvent<any, Outline>>;
    protected _desktopPropertyChangeHandler: EventHandler<PropertyChangeEvent<any, Desktop>>;
    protected _viewButtonBoxPropertyChangeHandler: EventHandler<PropertyChangeEvent<any, ViewButtonBox>>;
    constructor();
    static DEFAULT_STYLE_WIDTH: any;
    static BREADCRUMB_STYLE_WIDTH: any;
    static MIN_WIDTH: any;
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _remove(): void;
    protected _renderProperties(): void;
    protected _renderInBackground(): void;
    protected _renderViewButtonBox(): void;
    protected _removeOutline(): void;
    protected _renderOutline(): void;
    setOutline(outline: Outline): void;
    protected _setOutline(newOutline: Outline): void;
    protected _renderViewButtonBoxVisible(): void;
    sendToBack(): void;
    bringToFront(): void;
    setToolBoxVisible(toolBoxVisible: boolean): void;
    setHandleVisible(visible: boolean): void;
    protected _updateHandle(): void;
    updateHandleVisibility(): void;
    protected _renderToolBoxVisible(): void;
    protected _renderToolBox(): void;
    protected _removeToolBox(): void;
    protected _renderHandleVisible(): void;
    protected _createHandle(): DesktopNavigationHandle;
    protected _renderHandle(): void;
    protected _removeHandle(): void;
    protected _onNavigationBodyMouseDown(event: JQuery.MouseDownEvent): void;
    protected _onViewButtonBoxPropertyChange(event: PropertyChangeEvent<any, ViewButtonBox>): void;
    protected _onOutlinePropertyChange(event: PropertyChangeEvent<any, Outline>): void;
    protected _onDesktopPropertyChange(event: PropertyChangeEvent<any, Desktop>): void;
    protected _onHandleAction(event: CollapseHandleActionEvent): void;
}
export type DesktopNavigationLayoutData = LayoutData & {
    fullWidth?: boolean;
};
//# sourceMappingURL=DesktopNavigation.d.ts.map