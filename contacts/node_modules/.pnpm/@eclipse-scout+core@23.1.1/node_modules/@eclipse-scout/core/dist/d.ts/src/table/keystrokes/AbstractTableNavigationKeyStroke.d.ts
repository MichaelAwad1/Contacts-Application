import { KeyStroke, Rectangle, ScoutKeyboardEvent, Table, TableRow } from '../../index';
export declare abstract class AbstractTableNavigationKeyStroke extends KeyStroke {
    field: Table;
    constructor(table: Table);
    protected _accept(event: ScoutKeyboardEvent): boolean;
    /**
     * Returns viewport sensitive information containing the first and last visible row in the viewport.
     */
    protected _viewportInfo(): ViewPortInfo;
    firstRowAfterSelection(): TableRow;
    firstRowBeforeSelection(): TableRow;
    /**
     * Searches for the last selected row in the current selection block, starting from rowIndex. Expects row at rowIndex to be selected.
     */
    protected _findLastSelectedRowBefore(table: Table, rowIndex: number): TableRow;
    /**
     * Searches for the last selected row in the current selection block, starting from rowIndex. Expects row at rowIndex to be selected.
     */
    protected _findLastSelectedRowAfter(table: Table, rowIndex: number): TableRow;
    protected _findFirstRowInViewport(table: Table, viewportBounds: Rectangle): TableRow;
    protected _findLastRowInViewport(table: Table, startRowIndex: number, viewportBounds: Rectangle): TableRow;
    protected _isEnabled(): boolean;
}
export type ViewPortInfo = {
    firstRow?: TableRow;
    lastRow?: TableRow;
};
//# sourceMappingURL=AbstractTableNavigationKeyStroke.d.ts.map