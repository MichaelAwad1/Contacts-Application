import { InitModelOf, LogicalGridLayout, ObjectOrModel } from '../../index';
export interface LogicalGridLayoutConfigModel {
    /**
     * The horizontal gap in pixels to use between two logical grid columns.
     */
    hgap?: number;
    /**
     * The vertical gap in pixels to use between two logical grid rows.
     */
    vgap?: number;
    /**
     * The width in pixels to use for elements with the logical unit "width = 1".
     * Larger logical widths are multiplied with this value (and gaps are added).
     */
    columnWidth?: number;
    /**
     * The height in pixels to use for elements with the logical unit "height = 1".
     * Larger logical heights are multiplied with this value (and gaps are added).
     */
    rowHeight?: number;
    /**
     * The minimum width of the widget.
     * If this width is > 0 a horizontal scrollbar is shown when the widgets get smaller than this value.
     */
    minWidth?: number;
}
/**
 * Configures layouting hints for elements layouted by {@link LogicalGridLayout}.
 *
 * The configured hints only have an effect if theirs value is >=0.
 * Otherwise, the default values specified by CSS are applied (see {@link LogicalGridLayout._initDefaults}).
 */
export declare class LogicalGridLayoutConfig implements LogicalGridLayoutConfigModel {
    model: LogicalGridLayoutConfigModel;
    hgap: number;
    vgap: number;
    columnWidth: number;
    rowHeight: number;
    minWidth: number;
    constructor(options?: InitModelOf<LogicalGridLayoutConfig>);
    clone(): LogicalGridLayoutConfig;
    applyToLayout(layout: LogicalGridLayout): void;
    static ensure(layoutConfig: ObjectOrModel<LogicalGridLayoutConfig>): LogicalGridLayoutConfig;
}
//# sourceMappingURL=LogicalGridLayoutConfig.d.ts.map