import { AbstractLayout, EnumObject, Event, EventHandler, InitModelOf, SimpleTab, SimpleTabAreaEventMap, SimpleTabAreaModel, SimpleTabView, Widget } from '../index';
export type SimpleTabAreaDisplayStyle = EnumObject<typeof SimpleTabArea.DisplayStyle>;
export declare class SimpleTabArea<TView extends SimpleTabView = SimpleTabView> extends Widget implements SimpleTabAreaModel<TView> {
    model: SimpleTabAreaModel<TView>;
    eventMap: SimpleTabAreaEventMap<TView>;
    self: SimpleTabArea<any>;
    static DisplayStyle: {
        readonly DEFAULT: "default";
        readonly SPREAD_EVEN: "spreadEven";
    };
    displayStyle: SimpleTabAreaDisplayStyle;
    tabs: SimpleTab<TView>[];
    protected _selectedViewTab: SimpleTab<TView>;
    protected _tabClickHandler: EventHandler<Event<SimpleTab<TView>>>;
    constructor();
    protected _init(model: InitModelOf<this>): void;
    protected _render(): void;
    protected _createLayout(): AbstractLayout;
    protected _renderProperties(): void;
    setDisplayStyle(displayStyle: SimpleTabAreaDisplayStyle): void;
    protected _renderDisplayStyle(): void;
    protected _renderTabs(): void;
    protected _renderTab(tab: SimpleTab<TView>): void;
    protected _renderVisible(): void;
    protected _onTabClick(event: Event<SimpleTab<TView>>): void;
    getTabs(): SimpleTab<TView>[];
    getVisibleTabs(): SimpleTab<TView>[];
    selectTab(viewTab: SimpleTab<TView>): void;
    deselectTab(viewTab: SimpleTab<TView>): void;
    getSelectedTab(): SimpleTab<TView>;
    addTab(tab: SimpleTab<TView>, sibling?: SimpleTab<TView>): void;
    destroyTab(tab: SimpleTab<TView>): void;
}
//# sourceMappingURL=SimpleTabArea.d.ts.map