/// <reference types="jquery" />
import { Tile, TileGrid } from '../index';
export interface TileGridSelectionInstruction {
    selectedTiles: Tile[];
    focusedTile: Tile;
}
export declare class TileGridSelectionHandler {
    tileGrid: TileGrid;
    constructor(tileGrid: TileGrid);
    selectTileOnMouseDown(event: JQuery.MouseDownEvent): void;
    getFilteredTiles(): Tile[];
    getFilteredTileCount(): number;
    getVisibleTiles(): Tile[];
    getVisibleTileCount(): number;
    getGridColumnCount(): number;
    getVisibleGridRowCount(): number;
    getVisibleGridX(tile: Tile): number;
    getVisibleGridY(tile: Tile): number;
    getSelectedTiles(): Tile[];
    isSelectable(): boolean;
    isMultiSelect(): boolean;
    addTilesToSelection(tiles: Tile[]): void;
    selectTile(tile: Tile): void;
    selectTiles(tiles: Tile[]): void;
    deselectTile(tile: Tile): void;
    deselectTiles(tiles: Tile[]): void;
    deselectAllTiles(): void;
    toggleSelection(): void;
    getFocusedTile(): Tile;
    /**
     * Only sets the focus if event does not prevent the default and the tile does not have the class 'unfocusable'.
     */
    protected _checkAndSetFocusedTile(event: JQuery.MouseDownEvent, tile: Tile): void;
    setFocusedTile(tile: Tile): void;
    scrollTo(tile: Tile): void;
    scrollToTop(): void;
    scrollToBottom(): void;
    findVisibleTileIndexAt(x: number, y: number, startIndex?: number, reverse?: boolean): number;
    getTileGridByRow(rowIndex: number): TileGrid;
    isHorizontalGridActive(): boolean;
    computeSelectionX(xDiff: number, extend: boolean): TileGridSelectionInstruction;
    computeSelectionY(yDiff: number, extend: boolean): TileGridSelectionInstruction;
    computeSelectionToFirst(extend: boolean): TileGridSelectionInstruction;
    computeSelectionToLast(extend: boolean): TileGridSelectionInstruction;
    protected _computeFocusedTile(diff: number): TileGridSelectionInstruction;
    computeSelectionBetween(focusedTileIndex: number, newFocusedTileIndex: number, extend: boolean): TileGridSelectionInstruction;
    executeSelection(instruction: TileGridSelectionInstruction): void;
    /**
     * Searches for the last selected tile in the current selection block, starting from tileIndex. Expects tile at tileIndex to be selected.
     */
    protected _findLastSelectedTileBefore(tiles: Tile[], tileIndex: number): Tile;
    /**
     * Searches for the last selected tile in the current selection block, starting from tileIndex. Expects tile at tileIndex to be selected.
     */
    protected _findLastSelectedTileAfter(tiles: Tile[], tileIndex: number): Tile;
}
//# sourceMappingURL=TileGridSelectionHandler.d.ts.map