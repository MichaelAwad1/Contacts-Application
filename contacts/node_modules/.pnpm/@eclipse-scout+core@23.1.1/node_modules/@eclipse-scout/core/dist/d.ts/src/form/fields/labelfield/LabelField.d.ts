/// <reference types="jquery" />
import { LabelFieldEventMap, LabelFieldModel, ValueField } from '../../../index';
export declare class LabelField extends ValueField<string> implements LabelFieldModel {
    model: LabelFieldModel;
    eventMap: LabelFieldEventMap;
    self: LabelField;
    htmlEnabled: boolean;
    selectable: boolean;
    wrapText: boolean;
    constructor();
    /**
     * Resolves the text key if value contains one.
     * This cannot be done in _init because the value field would call _setValue first
     */
    protected _initValue(value: string): void;
    protected _render(): void;
    protected _renderProperties(): void;
    protected _renderFocused(): void;
    /**
     * Since a LabelField cannot be changed by a user, acceptInput does nothing.
     * Otherwise LabelFields could 'become' touched, because value and displayText
     * of the LabelField don't match.
     */
    acceptInput(whileTyping?: boolean): void;
    setHtmlEnabled(htmlEnabled: boolean): void;
    protected _renderHtmlEnabled(): void;
    protected _renderDisplayText(): void;
    setWrapText(wrapText: boolean): void;
    protected _renderWrapText(): void;
    setSelectable(selectable: boolean): void;
    protected _renderSelectable(): void;
    protected _renderGridData(): void;
    protected _renderGridDataHints(): void;
    protected _onAppLinkAction(event: JQuery.ClickEvent): void;
    triggerAppLinkAction(ref: string): void;
    addField($field: JQuery): void;
}
//# sourceMappingURL=LabelField.d.ts.map