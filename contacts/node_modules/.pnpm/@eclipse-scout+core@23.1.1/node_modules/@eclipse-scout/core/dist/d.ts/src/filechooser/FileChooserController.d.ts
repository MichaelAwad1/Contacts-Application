import { DisplayParent, FileChooser, Session } from '../index';
/**
 * Controller with functionality to register and render file choosers.
 *
 * The file choosers are put into the list fileChoosers contained in 'displayParent'.
 */
export declare class FileChooserController {
    displayParent: DisplayParent;
    session: Session;
    constructor(displayParent: DisplayParent, session: Session);
    /**
     * Adds the given file chooser to this controller and renders it.
     */
    registerAndRender(fileChooser: FileChooser): void;
    /**
     * Removes the given file chooser from this controller and DOM. However, the file chooser's adapter is not destroyed. That only happens once the file chooser is closed.
     */
    unregisterAndRemove(fileChooser: FileChooser): void;
    /**
     * Removes all file choosers registered with this controller from DOM.
     */
    remove(): void;
    /**
     * Renders all file choosers registered with this controller.
     */
    render(): void;
    protected _render(fileChooser: FileChooser): void;
    protected _remove(fileChooser: FileChooser): void;
    /**
     * Attaches all file choosers to their original DOM parents.
     * In contrast to 'render', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.
     *
     * This method has no effect if already attached.
     */
    attach(): void;
    /**
     * Detaches all file choosers from their DOM parents. Thereby, modality glassPanes are not detached.
     * In contrast to 'remove', this method uses 'JQuery detach mechanism' to retain CSS properties, so that the model must not be interpreted anew.
     *
     * This method has no effect if already detached.
     */
    detach(): void;
    acceptView(view: FileChooser): boolean;
}
//# sourceMappingURL=FileChooserController.d.ts.map