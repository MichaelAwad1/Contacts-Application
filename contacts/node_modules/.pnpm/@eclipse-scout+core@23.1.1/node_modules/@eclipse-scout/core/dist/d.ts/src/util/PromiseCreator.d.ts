/// <reference types="jquery" />
/**
 * The PromiseCreator is used to work with code that creates a lot of promises.
 * In some situations (e.g. file system access) only a few of the created promises can actually do work
 * all other promises must "wait" until, the browser finally executes the promise. All these promises
 * create some overhead. This class is used to prevent that, by delaying the creation of each promise
 * until the next() function is called. Typically the next function is not called until the previous
 * (one or more) promises have been executed.
 */
export declare class PromiseCreator {
    results: any[];
    error: any;
    items: (() => JQuery.Promise<any>)[];
    currentItem: number;
    aborted: boolean;
    constructor(items: (() => JQuery.Promise<any>)[]);
    hasNext(): boolean;
    next(): JQuery.Promise<any>;
    createPromise(): JQuery.Promise<any>;
    protected _createPromise(): JQuery.Promise<any>;
    protected _addResults(index: number, result: any[]): void;
    abort(): void;
}
//# sourceMappingURL=PromiseCreator.d.ts.map