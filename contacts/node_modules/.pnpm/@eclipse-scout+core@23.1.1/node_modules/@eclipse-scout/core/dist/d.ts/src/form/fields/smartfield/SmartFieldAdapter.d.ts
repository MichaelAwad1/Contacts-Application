import { Event, LookupFieldAdapter, SmartField, SmartFieldAcceptByTextEvent, SmartFieldAcceptInputEvent, SmartFieldLookupResult } from '../../../index';
export declare class SmartFieldAdapter extends LookupFieldAdapter {
    widget: SmartField<any>;
    constructor();
    /**
     * Property lookup-row must be handled before value, since the smart-field has either a lookup-row
     * or a value but never both (when we only have a value, the smart-field must perform a lookup by key
     * in order to resolve the display name for that value).
     * <br>
     * Intentionally don't re-use properties from super-classes.
     */
    static PROPERTIES_ORDER: string[];
    /** @internal */
    _postCreateWidget(): void;
    protected _syncResult(result: SmartFieldLookupResult<any>): void;
    protected _syncDisplayText(displayText: string): void;
    protected _orderPropertyNamesOnSync(newProperties: Record<string, any>): string[];
    protected _onWidgetEvent(event: Event<SmartField<any>>): void;
    protected _onWidgetAcceptByText(event: SmartFieldAcceptByTextEvent): void;
    protected _onWidgetAcceptInput(event: SmartFieldAcceptInputEvent): void;
}
//# sourceMappingURL=SmartFieldAdapter.d.ts.map